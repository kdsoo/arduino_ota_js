#!/usr/bin/env node
var request = require('request');
var fs = require('fs');
var path = require('path');
var ProgressBar = require('progress');
var commandLineArgs = require('command-line-args')
var optionDefinitions = [
	{name: 'verbose', alias: 'v', type: Boolean},
	{name: 'scan', alias: 's', type: Boolean},
	{name: 'address', alias: 'a', type: String, multiple: true},
	{name: 'firmware', alias: 'i', type: String}
];
var options = commandLineArgs(optionDefinitions)
var serviceScan = false;

if (!Object.keys(options).length) {
	console.error("No argument given");
	show_options();
	process.exit();
}

if (options.scan) {
	var mdns = require('mdns-js');
	mdns.excludeInterface('0.0.0.0');

	// mdns scan
	serviceScan = true;
} else {
	if (!options.address) {
		console.error("Adress is not given");
		show_options();
		process.exit();
	}
	if(!options.firmware) {
		console.error("firmware is not given");
		show_options();
		process.exit();
	}
}

function debug(msg) {
	if (vergose) {
		console.log(msg);
	}
}

function show_options() {
	var cmd = process.argv[1].split("/")[process.argv[1].split("/").length - 1];
	console.log("usage:", cmd, "-a addresses -i path_to_firmware -s");
	console.log("-a: http url to update endpoint");
	console.log("-i: path to firmware file");
	console.log("-s: scan available devices on network");
}

function parseTxtRecord(txt, item) {
	var record = null;
	for (var i = 0; i < txt.length; i++) {
		var data = txt[i].split("=");
		if (item == data[0]) {
			record = data[1];
		}
	}
	return record;
}

if (serviceScan == true) {
	var browser = mdns.createBrowser(mdns.tcp("arduino"));

	browser.on('ready', function onReady() {
		console.log('browser is ready');
		browser.discover();
	});

	browser.on('update', function onUpdate(data) {
		console.log(data.host, data.addresses, "\n\tboard:", parseTxtRecord(data.txt, "board"), "\n\tversion:", parseTxtRecord(data.txt, "version"), "\n\tbuild:", parseTxtRecord(data.txt, "build"));
	});

	setTimeout(function onTimeout() {
		browser.stop();
	}, 5000);
}

function upload_firmware(addr, firmware) {
	if (!fs.existsSync(firmware)) {
		console.error(firmware, "doesn't exist");
		process.exit();
	}
	return new Promise(function(resolve, reject) {
		var stats = fs.statSync(firmware)
		var Bytes = stats["size"]
		console.log("Firmware size:", Bytes, "Bytes");
		var bar = new ProgressBar("  " + addr + " Firmware upload [:bar] :rate/bps :percent :etas", {
			complete: '=',
			incomplete: ' ',
			width: 20,
			total: Bytes
		});
		var fileStream = fs.createReadStream(options.firmware);
		var form = {
			'image': fileStream,
		};
		var fileSize = 0;
		fileStream.on('data', function(data) {
			var blockLength = data.length;
			fileSize += blockLength;
			bar.tick(blockLength);
		});
		request.post({url: addr, timeout: 5000, formData: form}, function(err, httpResponse, body) {
			if (err) {
				console.error('upload failed:', err);
				reject({err: err});
			} else {
				console.log("Upload firmare on", addr, "done with", httpResponse.statusCode);
				resolve({addr: addr, code: httpResponse.statusCode});
			}
		});
	});
}

async function upload_firmware_multi(addrs, firmware) {
	var result = [];
	for (var i = 0; i < addrs.length; i++) {
		try {
			var ret = await upload_firmware(addrs[i], options.firmware);
			result.push({addr: addrs[i], ret: ret, err: null});
		} catch(e) {
			console.error(e);
			result.push({addr: addrs[i], ret: null, err: e});
		}
	}
	return result;
}

if (options.address) {
	if (options.address.length > 1) {
		upload_firmware_multi(options.address, options.firmware).then(function(ret) {
			console.log("Firmware update done with", ret);
		});
	} else {
		upload_firmware(options.address[0], options.firmware).then(function(ret) {
			console.log("Firmware update done with", ret);
		});
	}
}
